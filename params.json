{
  "name": "Logml",
  "tagline": "Development of an integrated logical modelling tool from the beginning steps of logical graph modelling to the final simulations outputs.",
  "body": "# Logml\r\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\r\n[![npm][npm-image]][npm-url]\r\n[![downloads][downloads-image]][downloads-url]\r\n\r\n[npm-image]: https://img.shields.io/npm/v/logml.svg?style=flat\r\n[npm-url]: https://npmjs.org/package/logml\r\n[downloads-image]: https://img.shields.io/npm/dm/logml.svg?style=flat\r\n[downloads-url]: https://npmjs.org/package/logml\r\n\r\nLogml is a logical modelling framework based on the Boolean network theory where classic Boolean operators are replaced with fuzzy operators and where edges are  tuned  in  order  to  adapt  the  speed  and  the strength  of  the  signal  that  they transmit.\r\n\r\nThis tool is an adaptation of a methodology developed at [Novadiscovery](http://www.novadiscovery.com/) and freely accessible at:\r\n\r\n[Poret, A., Monteiro Sousa, C., Boissel, J.-P.: Enhancing boolean networks with fuzzy operators and edge tuning.arXiv:1407.1135 (2014)](https://arxiv.org/abs/1407.1135v5)\r\n\r\n## Table of contents\r\n\r\n- [Installation](#installation)\r\n  - [Requirements](#requirements)\r\n    - [Fortran](#fortran)\r\n    - [NodeJS](#nodejs)\r\n    - [Logml](#logml)\r\n- [Usage](#usage)\r\n  - [Logical graph](#logical-graph)\r\n    - [Annotation of nodes](#annotation-of-nodes)\r\n    - [Annotation of edges](#annotation-of-edges)\r\n    - [Annotation of perturbed nodes](#annotation-of-perturbed-nodes)\r\n  - [Run Logml](#run-logml)\r\n- [Example](#example)\r\n\r\n---\r\n\r\n## Installation\r\n\r\n### Requirements\r\n\r\n- [Fortran](https://gcc.gnu.org/wiki/GFortranDistros)\r\n- [NodeJS](https://nodejs.org)\r\n\r\n\r\n#### Fortran\r\n\r\n**For Linux**, install [gfortran](https://gcc.gnu.org/wiki/GFortranDistros)\r\n\r\n```bash\r\nsudo apt-get update\r\nsudo apt-get install gfortran\r\n```\r\n\r\n**For OSX**, Check that `gcc` (that comes with gfortran) has been correctly\r\ninstalled. If not, install it via brew:\r\n\r\n```bash\r\nbrew install gcc\r\n```\r\n\r\n#### NodeJS\r\n\r\nJust install the last stable version from https://nodejs.org, or use [Node Version Manager](https://github.com/creationix/nvm)\r\n\r\n#### Logml\r\n\r\nTo install Logml, just run the following command :\r\n\r\n```bash\r\nnpm install -g logml\r\n```\r\n\r\nNow you can use the `logml` command:\r\n\r\n```bash\r\nlogml --help\r\n```\r\n\r\n\r\n\r\n## Usage\r\n\r\nThe Logml modelling and simulation tool takes a logical graph (.graphml format) as input. The tool will automatically parse the graph and generate the corresponding code. The logical model is then executed and results are plotted via a dedicated web interface.\r\n\r\n### Logical graph\r\n\r\nA logical graph is a special type of diagramatic structure in which entities are linked by logical relations symbolized by the logic operators: `AND`, `OR` and `NOT`.\r\n\r\nWe use for that the [yED graph editor](https://www.yworks.com/downloads#yEd) (which is freely available and runs on all major platforms), and the [following graphical ontology](test/fixtures/graphml/graphical_ontology.graphml):\r\n\r\n![](http://nodys.github.io/logml/images/Graphical_ontology.png)\r\n\r\nPlease find bellow an example of a logical graph, which will be used throughout this tutorial:\r\n\r\n![](http://nodys.github.io/logml/images/example.png)\r\n\r\nIn order to ensure the proper functioning of Logml tool, the following instructions must be observed carefully during the creation of the logical graph in [yED](https://www.yworks.com/products/yed).\r\n\r\n#### Annotation of nodes\r\n\r\nEach node of the graph (entity) need to be annotated (in yED, right click on the node > `properties` > `data`) with its qualitative initial values (integers only, and between 0 and 5). The node initial states are defined as following:\r\n\r\n| Annotation | Meaning   |\r\n|:-----------|:----------|\r\n| `v0=5`     | full      |\r\n| `v0=4`     | much more |\r\n| `v0=3`     | much      |\r\n| `v0=2`     | few       |\r\n| `v0=1`     | fewer     |\r\n| `v0=0`     | none      |\r\n\r\nPlease find below an example of node annotation:\r\n\r\n![](http://nodys.github.io/logml/images/node-annotation.png)\r\n\r\n#### Annotation of edges\r\n\r\nEach edge need to be annotated (in yED, right click on the edge > `properties` > `general`) with its qualitative `p` and `q` values (integers only, and between 0 and 5).\r\n\r\n+ For each edges, `p` is the portion of its value which is updated at each iteration:\r\n\r\n| Annotation | Meaning       |\r\n|:-----------|:--------------|\r\n| `p=5`      | instantaneous |\r\n| `p=4`      | faster        |\r\n| `p=3`      | fast          |\r\n| `p=2`      | slow          |\r\n| `p=1`      | slower        |\r\n| `p=0`      | down          |\r\n\r\n+ For each edges, `q` is the weakening of its value at each iteration:\r\n\r\n| Annotation | Meaning |\r\n|:-----------|:--------|\r\n| `q=5`      | strong  |\r\n| `q=4`      | weaker  |\r\n| `q=3`      | weak    |\r\n| `q=2`      | faint   |\r\n| `q=1`      | fainter |\r\n| `q=0`      | down    |\r\n\r\nPlease find below an example of edge annotation:\r\n\r\n![](http://nodys.github.io/logml/images/edge-annotation.png)\r\n\r\n#### Annotation of perturbed nodes\r\n\r\nWe can identify nodes that will be the subject of a disturbance by annotating (in yED, right click on the entity > `properties` > `data`) with:\r\n\r\n+ the strength of the disturbance applied to the node. The disturbed states will be defined as following (integers only, and between 0 and 5):\r\n\r\n| Annotation | Meaning   |\r\n|:-----------|:----------|\r\n| `pwd=5`    | full      |\r\n| `pwd=4`    | much more |\r\n| `pwd=3`    | much      |\r\n| `pwd=2`    | few       |\r\n| `pwd=1`    | fewer     |\r\n| `pwd=0`    | none      |\r\n\r\n+ the interval of iterations at which disturbances begin and end respectively. The intervals will be defined as following (integers only, and between 0 and 100):\r\n\r\n`int=20,60`: in this case, perturbations will start after 20% of iterations, and will stop after 60% of iterations.\r\n\r\nAn example of disturbance annotation is presented in the following screenshot:\r\n\r\n![](http://nodys.github.io/logml/images/pert-nodes-annotation.png)\r\n\r\n### Run Logml\r\n\r\n```bash\r\nlogml --help\r\n\r\n    Usage: logml <input>\r\n\r\n    Options:\r\n\r\n      -h, --help             Output usage information\r\n      -V, --version          Output the version number\r\n      -d, --dolphin          Output an human readable version of the parsed graph\r\n      -i, --iterations <n>   The number of iterations performed during a run\r\n      -o, --output <folder>  The output folder\r\n      -w, --watch            Watch for any changes and update the output (if input is a file)\r\n      -v, --verbose          Print out informations on build (activate --verbose)\r\n      -s, --server [port]    Create a plotting server (activate --verbose)\r\n      -p, --open             Open url on start\r\n      -f --faster            Prevent some size optimisation, faster, bigger (stronger)\r\n      --silent               Prevent verbose mode\r\n```\r\n\r\n## Example\r\n\r\nWe used the following Logml command with the `example.graphml`:\r\n\r\n```bash\r\nlogml example.graphml -o ./tmp -wsvp\r\n```\r\n\r\nAnd we obtained the following output result:\r\n\r\n![](http://nodys.github.io/logml/images/plot.png)\r\n\r\n---\r\n\r\nLicense: [MIT](./LICENSE) - Novadiscovery\r\n\r\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}